# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2019, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 2.1.0+/89df177\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-30 00:15+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../development/tutorials/todo.rst:2
msgid "Developing a \"TODO\" extension"
msgstr ""

#: ../../development/tutorials/todo.rst:4
msgid "The objective of this tutorial is to create a more comprehensive extension than that created in :doc:`helloworld`. Whereas that guide just covered writing a custom :term:`directive`, this guide adds multiple directives, along with custom nodes, additional config values and custom event handlers. To this end, we will cover a ``todo`` extension that adds capabilities to include todo entries in the documentation, and to collect these in a central place. This is similar the ``sphinxext.todo`` extension distributed with Sphinx."
msgstr ""

#: ../../development/tutorials/todo.rst:14
msgid "Overview"
msgstr ""

#: ../../development/tutorials/todo.rst:17
msgid "To understand the design of this extension, refer to :ref:`important-objects` and :ref:`build-phases`."
msgstr ""

#: ../../development/tutorials/todo.rst:20
msgid "We want the extension to add the following to Sphinx:"
msgstr ""

#: ../../development/tutorials/todo.rst:22
msgid "A ``todo`` directive, containing some content that is marked with \"TODO\" and only shown in the output if a new config value is set. Todo entries should not be in the output by default."
msgstr ""

#: ../../development/tutorials/todo.rst:26
msgid "A ``todolist`` directive that creates a list of all todo entries throughout the documentation."
msgstr ""

#: ../../development/tutorials/todo.rst:29
msgid "For that, we will need to add the following elements to Sphinx:"
msgstr ""

#: ../../development/tutorials/todo.rst:31
msgid "New directives, called ``todo`` and ``todolist``."
msgstr ""

#: ../../development/tutorials/todo.rst:33
msgid "New document tree nodes to represent these directives, conventionally also called ``todo`` and ``todolist``.  We wouldn't need new nodes if the new directives only produced some content representable by existing nodes."
msgstr ""

#: ../../development/tutorials/todo.rst:37
msgid "A new config value ``todo_include_todos`` (config value names should start with the extension name, in order to stay unique) that controls whether todo entries make it into the output."
msgstr ""

#: ../../development/tutorials/todo.rst:41
msgid "New event handlers: one for the :event:`doctree-resolved` event, to replace the todo and todolist nodes, and one for :event:`env-purge-doc` (the reason for that will be covered later)."
msgstr ""

#: ../../development/tutorials/todo.rst:47
msgid "Prerequisites"
msgstr ""

#: ../../development/tutorials/todo.rst:49
msgid "As with :doc:`helloworld`, we will not be distributing this plugin via PyPI so once again we need a Sphinx project to call this from. You can use an existing project or create a new one using :program:`sphinx-quickstart`."
msgstr ""

#: ../../development/tutorials/todo.rst:53
msgid "We assume you are using separate source (:file:`source`) and build (:file:`build`) folders. Your extension file could be in any folder of your project. In our case, let's do the following:"
msgstr ""

#: ../../development/tutorials/todo.rst:57
msgid "Create an :file:`_ext` folder in :file:`source`"
msgstr ""

#: ../../development/tutorials/todo.rst:58
msgid "Create a new Python file in the :file:`_ext` folder called :file:`todo.py`"
msgstr ""

#: ../../development/tutorials/todo.rst:60
msgid "Here is an example of the folder structure you might obtain:"
msgstr ""

#: ../../development/tutorials/todo.rst:76
msgid "Writing the extension"
msgstr ""

#: ../../development/tutorials/todo.rst:78
msgid "Open :file:`todo.py` and paste the following code in it, all of which we will explain in detail shortly:"
msgstr ""

#: ../../development/tutorials/todo.rst:85
msgid "This is far more extensive extension than the one detailed in :doc:`helloworld`, however, we will will look at each piece step-by-step to explain what's happening."
msgstr ""

#: ../../development/tutorials/todo.rst:90
msgid "The node classes"
msgstr ""

#: ../../development/tutorials/todo.rst:91
msgid "Let's start with the node classes:"
msgstr ""

#: ../../development/tutorials/todo.rst:98
msgid "Node classes usually don't have to do anything except inherit from the standard docutils classes defined in :mod:`docutils.nodes`.  ``todo`` inherits from ``Admonition`` because it should be handled like a note or warning, ``todolist`` is just a \"general\" node."
msgstr ""

#: ../../development/tutorials/todo.rst:105
msgid "Many extensions will not have to create their own node classes and work fine with the nodes already provided by `docutils <http://docutils.sourceforge.net/docs/ref/doctree.html>`__ and :ref:`Sphinx <nodes>`."
msgstr ""

#: ../../development/tutorials/todo.rst:111
msgid "The directive classes"
msgstr ""

#: ../../development/tutorials/todo.rst:112
msgid "A directive class is a class deriving usually from :class:`docutils.parsers.rst.Directive`. The directive interface is also covered in detail in the `docutils documentation`_; the important thing is that the class should have attributes that configure the allowed markup, and a ``run`` method that returns a list of nodes."
msgstr ""

#: ../../development/tutorials/todo.rst:118
msgid "Looking first at the ``TodolistDirective`` directive:"
msgstr ""

#: ../../development/tutorials/todo.rst:125
msgid "It's very simple, creating and returning an instance of our ``todolist`` node class.  The ``TodolistDirective`` directive itself has neither content nor arguments that need to be handled. That brings us to the ``TodoDirective`` directive:"
msgstr ""

#: ../../development/tutorials/todo.rst:135
msgid "Several important things are covered here. First, as you can see, we're now subclassing the :class:`~sphinx.util.docutils.SphinxDirective` helper class instead of the usual :class:`~docutils.parsers.rst.Directive` class. This gives us access to the :ref:`build environment instance <important-objects>` using the ``self.env`` property. Without this, we'd have to use the rather convoluted ``self.state.document.settings.env``. Then, to act as a link target (from ``TodolistDirective``), the ``TodoDirective`` directive needs to return a target node in addition to the ``todo`` node.  The target ID (in HTML, this will be the anchor name) is generated by using ``env.new_serialno`` which returns a new unique integer on each call and therefore leads to unique target names. The target node is instantiated without any text (the first two arguments)."
msgstr ""

#: ../../development/tutorials/todo.rst:147
msgid "On creating admonition node, the content body of the directive are parsed using ``self.state.nested_parse``.  The first argument gives the content body, and the second one gives content offset.  The third argument gives the parent node of parsed result, in our case the ``todo`` node. Following this, the ``todo`` node is added to the environment.  This is needed to be able to create a list of all todo entries throughout the documentation, in the place where the author puts a ``todolist`` directive.  For this case, the environment attribute ``todo_all_todos`` is used (again, the name should be unique, so it is prefixed by the extension name).  It does not exist when a new environment is created, so the directive must check and create it if necessary.  Various information about the todo entry's location are stored along with a copy of the node."
msgstr ""

#: ../../development/tutorials/todo.rst:159
msgid "In the last line, the nodes that should be put into the doctree are returned: the target node and the admonition node."
msgstr ""

#: ../../development/tutorials/todo.rst:162
msgid "The node structure that the directive returns looks like this::"
msgstr ""

#: ../../development/tutorials/todo.rst:179
msgid "The event handlers"
msgstr ""

#: ../../development/tutorials/todo.rst:180
msgid "Event handlers are one of Sphinx's most powerful features, providing a way to do hook into any part of the documentation process. There are many events provided by Sphinx itself, as detailed in :ref:`the API guide <events>`, and we're going to use a subset of them here."
msgstr ""

#: ../../development/tutorials/todo.rst:185
msgid "Let's look at the event handlers used in the above example.  First, the one for the :event:`env-purge-doc` event:"
msgstr ""

#: ../../development/tutorials/todo.rst:193
msgid "Since we store information from source files in the environment, which is persistent, it may become out of date when the source file changes.  Therefore, before each source file is read, the environment's records of it are cleared, and the :event:`env-purge-doc` event gives extensions a chance to do the same. Here we clear out all todos whose docname matches the given one from the ``todo_all_todos`` list.  If there are todos left in the document, they will be added again during parsing."
msgstr ""

#: ../../development/tutorials/todo.rst:201
msgid "The other handler belongs to the :event:`doctree-resolved` event:"
msgstr ""

#: ../../development/tutorials/todo.rst:208
msgid "The :event:`doctree-resolved` event is emitted at the end of :ref:`phase 3 (resolving) <build-phases>` and allows custom resolving to be done. The handler we have written for this event is a bit more involved. If the ``todo_include_todos`` config value (which we'll describe shortly) is false, all ``todo`` and ``todolist`` nodes are removed from the documents. If not, ``todo`` nodes just stay where and how they are.  ``todolist`` nodes are replaced by a list of todo entries, complete with backlinks to the location where they come from.  The list items are composed of the nodes from the ``todo`` entry and docutils nodes created on the fly: a paragraph for each entry, containing text that gives the location, and a link (reference node containing an italic node) with the backreference. The reference URI is built by :meth:`sphinx.builders.Builder.get_relative_uri`` which creates a suitable URI depending on the used builder, and appending the todo node's (the target's) ID as the anchor name."
msgstr ""

#: ../../development/tutorials/todo.rst:224
msgid "The ``setup`` function"
msgstr ""

#: ../../development/tutorials/todo.rst:227
msgid "As noted :doc:`previously <helloworld>`, the ``setup`` function is a requirement and is used to plug directives into Sphinx. However, we also use it to hook up the other parts of our extension. Let's look at our ``setup`` function:"
msgstr ""

#: ../../development/tutorials/todo.rst:236
msgid "The calls in this function refer to the classes and functions we added earlier. What the individual calls do is the following:"
msgstr ""

#: ../../development/tutorials/todo.rst:239
msgid ":meth:`~Sphinx.add_config_value` lets Sphinx know that it should recognize the new *config value* ``todo_include_todos``, whose default value should be ``False`` (this also tells Sphinx that it is a boolean value)."
msgstr ""

#: ../../development/tutorials/todo.rst:243
msgid "If the third argument was ``'html'``, HTML documents would be full rebuild if the config value changed its value.  This is needed for config values that influence reading (build :ref:`phase 1 (reading) <build-phases>`)."
msgstr ""

#: ../../development/tutorials/todo.rst:247
msgid ":meth:`~Sphinx.add_node` adds a new *node class* to the build system.  It also can specify visitor functions for each supported output format.  These visitor functions are needed when the new nodes stay until :ref:`phase 4 (writing) <build-phases>`. Since the ``todolist`` node is always replaced in :ref:`phase 3 (resolving) <build-phases>`, it doesn't need any."
msgstr ""

#: ../../development/tutorials/todo.rst:253
msgid ":meth:`~Sphinx.add_directive` adds a new *directive*, given by name and class."
msgstr ""

#: ../../development/tutorials/todo.rst:255
msgid "Finally, :meth:`~Sphinx.connect` adds an *event handler* to the event whose name is given by the first argument.  The event handler function is called with several arguments which are documented with the event."
msgstr ""

#: ../../development/tutorials/todo.rst:259
msgid "With this, our extension is complete."
msgstr ""

#: ../../development/tutorials/todo.rst:263
msgid "Using the extension"
msgstr ""

#: ../../development/tutorials/todo.rst:265
msgid "As before, we need to enable the extension by declaring it in our :file:`conf.py` file. There are two steps necessary here:"
msgstr ""

#: ../../development/tutorials/todo.rst:268
msgid "Add the :file:`_ext` directory to the `Python path`_ using ``sys.path.append``. This should be placed at the top of the file."
msgstr ""

#: ../../development/tutorials/todo.rst:271
msgid "Update or create the :confval:`extensions` list and add the extension file name to the list"
msgstr ""

#: ../../development/tutorials/todo.rst:274
msgid "In addition, we may wish to set the ``todo_include_todos`` config value. As noted above, this defaults to ``False`` but we can set it explicitly."
msgstr ""

#: ../../development/tutorials/todo.rst:277
msgid "For example:"
msgstr ""

#: ../../development/tutorials/todo.rst:290
msgid "You can now use the extension throughout your project. For example:"
msgstr ""

#: ../../development/tutorials/todo.rst:292
msgid "index.rst"
msgstr ""

#: ../../development/tutorials/todo.rst:306
msgid "somefile.rst"
msgstr ""

#: ../../development/tutorials/todo.rst:316
msgid "someotherfile.rst"
msgstr ""

#: ../../development/tutorials/todo.rst:326
msgid "Because we have configured ``todo_include_todos`` to ``False``, we won't actually see anything rendered for the ``todo`` and ``todolist`` directives. However, if we toggle this to true, we will see the output described previously."
msgstr ""

#: ../../development/tutorials/todo.rst:333
msgid "Further reading"
msgstr ""

#: ../../development/tutorials/todo.rst:335
msgid "For more information, refer to the `docutils`_ documentation and :doc:`/extdev/index`."
msgstr ""

