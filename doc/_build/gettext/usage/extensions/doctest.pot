# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2019, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 2.1.0+/41035e8f9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-08 16:18+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../usage/extensions/doctest.rst:4
msgid ":mod:`sphinx.ext.doctest` -- Test snippets in the documentation"
msgstr ""

#: ../../usage/extensions/doctest.rst:14
msgid "This extension allows you to test snippets in the documentation in a natural way.  It works by collecting specially-marked up code blocks and running them as doctest tests."
msgstr ""

#: ../../usage/extensions/doctest.rst:18
msgid "Within one document, test code is partitioned in *groups*, where each group consists of:"
msgstr ""

#: ../../usage/extensions/doctest.rst:21
msgid "zero or more *setup code* blocks (e.g. importing the module to test)"
msgstr ""

#: ../../usage/extensions/doctest.rst:22
msgid "one or more *test* blocks"
msgstr ""

#: ../../usage/extensions/doctest.rst:24
msgid "When building the docs with the ``doctest`` builder, groups are collected for each document and run one after the other, first executing setup code blocks, then the test blocks in the order they appear in the file."
msgstr ""

#: ../../usage/extensions/doctest.rst:28
msgid "There are two kinds of test blocks:"
msgstr ""

#: ../../usage/extensions/doctest.rst:30
msgid "*doctest-style* blocks mimic interactive sessions by interleaving Python code (including the interpreter prompt) and output."
msgstr ""

#: ../../usage/extensions/doctest.rst:33
msgid "*code-output-style* blocks consist of an ordinary piece of Python code, and optionally, a piece of output for that code."
msgstr ""

#: ../../usage/extensions/doctest.rst:38
msgid "Directives"
msgstr ""

#: ../../usage/extensions/doctest.rst:40
msgid "The *group* argument below is interpreted as follows: if it is empty, the block is assigned to the group named ``default``.  If it is ``*``, the block is assigned to all groups (including the ``default`` group).  Otherwise, it must be a comma-separated list of group names."
msgstr ""

#: ../../usage/extensions/doctest.rst:47
msgid "A setup code block.  This code is not shown in the output for other builders, but executed before the doctests of the group(s) it belongs to."
msgstr ""

#: ../../usage/extensions/doctest.rst:53
msgid "A cleanup code block.  This code is not shown in the output for other builders, but executed after the doctests of the group(s) it belongs to."
msgstr ""

#: ../../usage/extensions/doctest.rst:61
msgid "A doctest-style code block.  You can use standard :mod:`doctest` flags for controlling how actual output is compared with what you give as output.  The default set of flags is specified by the :confval:`doctest_default_flags` configuration variable."
msgstr ""

#: ../../usage/extensions/doctest.rst:66
msgid "This directive supports three options:"
msgstr ""

#: ../../usage/extensions/doctest.rst:68
msgid "``hide``, a flag option, hides the doctest block in other builders.  By default it is shown as a highlighted doctest block."
msgstr ""

#: ../../usage/extensions/doctest.rst:71
msgid "``options``, a string option, can be used to give a comma-separated list of doctest flags that apply to each example in the tests.  (You still can give explicit flags per example, with doctest comments, but they will show up in other builders too.)"
msgstr ""

#: ../../usage/extensions/doctest.rst:76
msgid "``pyversion``, a string option, can be used to specify the required Python version for the example to be tested. For instance, in the following case the example will be tested only for Python versions greater than 3.3::"
msgstr ""

#: ../../usage/extensions/doctest.rst:83
msgid "The following operands are supported:"
msgstr ""

#: ../../usage/extensions/doctest.rst:85
msgid "``~=``: Compatible release clause"
msgstr ""

#: ../../usage/extensions/doctest.rst:86
msgid "``==``: Version matching clause"
msgstr ""

#: ../../usage/extensions/doctest.rst:87
msgid "``!=``: Version exclusion clause"
msgstr ""

#: ../../usage/extensions/doctest.rst:88
msgid "``<=``, ``>=``: Inclusive ordered comparison clause"
msgstr ""

#: ../../usage/extensions/doctest.rst:89
msgid "``<``, ``>``: Exclusive ordered comparison clause"
msgstr ""

#: ../../usage/extensions/doctest.rst:90
msgid "``===``: Arbitrary equality clause."
msgstr ""

#: ../../usage/extensions/doctest.rst:92
msgid "``pyversion`` option is followed `PEP-440: Version Specifiers <https://www.python.org/dev/peps/pep-0440/#version-specifiers>`__."
msgstr ""

#: ../../usage/extensions/doctest.rst:99
msgid "Supported PEP-440 operands and notations"
msgstr ""

#: ../../usage/extensions/doctest.rst:101
msgid "Note that like with standard doctests, you have to use ``<BLANKLINE>`` to signal a blank line in the expected output.  The ``<BLANKLINE>`` is removed when building presentation output (HTML, LaTeX etc.)."
msgstr ""

#: ../../usage/extensions/doctest.rst:105
msgid "Also, you can give inline doctest options, like in doctest::"
msgstr ""

#: ../../usage/extensions/doctest.rst:110
msgid "They will be respected when the test is run, but stripped from presentation output."
msgstr ""

#: ../../usage/extensions/doctest.rst:116
msgid "A code block for a code-output-style test."
msgstr ""

#: ../../usage/extensions/doctest.rst:118
msgid "This directive supports one option:"
msgstr ""

#: ../../usage/extensions/doctest.rst:120
msgid "``hide``, a flag option, hides the code block in other builders.  By default it is shown as a highlighted code block."
msgstr ""

#: ../../usage/extensions/doctest.rst:125
msgid "Code in a ``testcode`` block is always executed all at once, no matter how many statements it contains.  Therefore, output will *not* be generated for bare expressions -- use ``print``.  Example::"
msgstr ""

#: ../../usage/extensions/doctest.rst:138
msgid "Also, please be aware that since the doctest module does not support mixing regular output and an exception message in the same snippet, this applies to testcode/testoutput as well."
msgstr ""

#: ../../usage/extensions/doctest.rst:145
msgid "The corresponding output, or the exception message, for the last :rst:dir:`testcode` block."
msgstr ""

#: ../../usage/extensions/doctest.rst:148
msgid "This directive supports two options:"
msgstr ""

#: ../../usage/extensions/doctest.rst:150
msgid "``hide``, a flag option, hides the output block in other builders.  By default it is shown as a literal block without highlighting."
msgstr ""

#: ../../usage/extensions/doctest.rst:153
msgid "``options``, a string option, can be used to give doctest flags (comma-separated) just like in normal doctest blocks."
msgstr ""

#: ../../usage/extensions/doctest.rst:156
msgid "Example::"
msgstr ""

#: ../../usage/extensions/doctest.rst:168
msgid "The following is an example for the usage of the directives.  The test via :rst:dir:`doctest` and the test via :rst:dir:`testcode` and :rst:dir:`testoutput` are equivalent. ::"
msgstr ""

#: ../../usage/extensions/doctest.rst:202
msgid "Skipping tests conditionally"
msgstr ""

#: ../../usage/extensions/doctest.rst:204
msgid "``skipif``, a string option, can be used to skip directives conditionally. This may be useful e.g. when a different set of tests should be run depending on the environment (hardware, network/VPN, optional dependencies or different versions of dependencies). The ``skipif`` option is supported by all of the doctest directives. Below are typical use cases for ``skipif`` when used for different directives:"
msgstr ""

#: ../../usage/extensions/doctest.rst:211
msgid ":rst:dir:`testsetup` and :rst:dir:`testcleanup`"
msgstr ""

#: ../../usage/extensions/doctest.rst:213
msgid "conditionally skip test setup and/or cleanup"
msgstr ""

#: ../../usage/extensions/doctest.rst:214
msgid "customize setup/cleanup code per environment"
msgstr ""

#: ../../usage/extensions/doctest.rst:216
msgid ":rst:dir:`doctest`"
msgstr ""

#: ../../usage/extensions/doctest.rst:218
msgid "conditionally skip both a test and its output verification"
msgstr ""

#: ../../usage/extensions/doctest.rst:220
msgid ":rst:dir:`testcode`"
msgstr ""

#: ../../usage/extensions/doctest.rst:222
msgid "conditionally skip a test"
msgstr ""

#: ../../usage/extensions/doctest.rst:223
msgid "customize test code per environment"
msgstr ""

#: ../../usage/extensions/doctest.rst:225
msgid ":rst:dir:`testoutput`"
msgstr ""

#: ../../usage/extensions/doctest.rst:227
msgid "conditionally skip output assertion for a skipped test"
msgstr ""

#: ../../usage/extensions/doctest.rst:228
msgid "expect different output depending on the environment"
msgstr ""

#: ../../usage/extensions/doctest.rst:230
msgid "The value of the ``skipif`` option is evaluated as a Python expression. If the result is a true value, the directive is omitted from the test run just as if it wasn't present in the file at all."
msgstr ""

#: ../../usage/extensions/doctest.rst:234
msgid "Instead of repeating an expression, the :confval:`doctest_global_setup` configuration option can be used to assign it to a variable which can then be used instead."
msgstr ""

#: ../../usage/extensions/doctest.rst:238
msgid "Here's an example which skips some tests if Pandas is not installed:"
msgstr ""

#: ../../usage/extensions/doctest.rst:240
msgid "conf.py"
msgstr ""

#: ../../usage/extensions/doctest.rst:251
msgid "contents.rst"
msgstr ""

#: ../../usage/extensions/doctest.rst:277
msgid "Configuration"
msgstr ""

#: ../../usage/extensions/doctest.rst:279
msgid "The doctest extension uses the following configuration values:"
msgstr ""

#: ../../usage/extensions/doctest.rst:283
msgid "By default, these options are enabled:"
msgstr ""

#: ../../usage/extensions/doctest.rst:285
msgid "``ELLIPSIS``, allowing you to put ellipses in the expected output that match anything in the actual output;"
msgstr ""

#: ../../usage/extensions/doctest.rst:287
msgid "``IGNORE_EXCEPTION_DETAIL``, causing everything following the leftmost colon and any module information in the exception name to be ignored;"
msgstr ""

#: ../../usage/extensions/doctest.rst:289
msgid "``DONT_ACCEPT_TRUE_FOR_1``, rejecting \"True\" in the output where \"1\" is given -- the default behavior of accepting this substitution is a relic of pre-Python 2.2 times."
msgstr ""

#: ../../usage/extensions/doctest.rst:297
msgid "A list of directories that will be added to :data:`sys.path` when the doctest builder is used.  (Make sure it contains absolute paths.)"
msgstr ""

#: ../../usage/extensions/doctest.rst:302
msgid "Python code that is treated like it were put in a ``testsetup`` directive for *every* file that is tested, and for every group.  You can use this to e.g. import modules you will always need in your doctests."
msgstr ""

#: ../../usage/extensions/doctest.rst:310
msgid "Python code that is treated like it were put in a ``testcleanup`` directive for *every* file that is tested, and for every group.  You can use this to e.g. remove any temporary files that the tests leave behind."
msgstr ""

#: ../../usage/extensions/doctest.rst:318
msgid "If this is a nonempty string (the default is ``'default'``), standard reST doctest blocks will be tested too.  They will be assigned to the group name given."
msgstr ""

#: ../../usage/extensions/doctest.rst:322
msgid "reST doctest blocks are simply doctests put into a paragraph of their own, like so::"
msgstr ""

#: ../../usage/extensions/doctest.rst:332
msgid "(Note that no special ``::`` is used to introduce a doctest block; docutils recognizes them from the leading ``>>>``.  Also, no additional indentation is used, though it doesn't hurt.)"
msgstr ""

#: ../../usage/extensions/doctest.rst:336
msgid "If this value is left at its default value, the above snippet is interpreted by the doctest builder exactly like the following::"
msgstr ""

#: ../../usage/extensions/doctest.rst:348
msgid "This feature makes it easy for you to test doctests in docstrings included with the :mod:`~sphinx.ext.autodoc` extension without marking them up with a special directive."
msgstr ""

#: ../../usage/extensions/doctest.rst:352
msgid "Note though that you can't have blank lines in reST doctest blocks.  They will be interpreted as one block ending and another one starting.  Also, removal of ``<BLANKLINE>`` and ``# doctest:`` options only works in :rst:dir:`doctest` blocks, though you may set :confval:`trim_doctest_flags` to achieve that in all code blocks with Python console content."
msgstr ""

