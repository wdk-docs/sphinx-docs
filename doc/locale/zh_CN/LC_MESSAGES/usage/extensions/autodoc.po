# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2019, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 2.1.0+/1499a97c2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-10 15:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../usage/extensions/autodoc.rst:4
msgid ":mod:`sphinx.ext.autodoc` -- Include documentation from docstrings"
msgstr ":mod:`sphinx.ext.autodoc` -- 包括docstrings中的文档"

#: ../../usage/extensions/autodoc.rst:12
msgid ""
"This extension can import the modules you are documenting, and pull in "
"documentation from docstrings in a semi-automatic way."
msgstr "此扩展可以导入您正在记录的模块，并以半自动方式从文档字符串中提取文档。"

#: ../../usage/extensions/autodoc.rst:17
msgid ""
"For Sphinx (actually, the Python interpreter that executes Sphinx) to "
"find your module, it must be importable.  That means that the module or "
"the package must be in one of the directories on :data:`sys.path` -- "
"adapt your :data:`sys.path` in the configuration file accordingly."
msgstr ""
"对于Sphinx（实际上是执行Sphinx的Python解释器）来查找模块，它必须是可导入的。  这意味着模块或包必须位于以下目录之一 "
":data:`sys.path` - 相应地调整配置文件中的 :data:`sys.path` 。"

#: ../../usage/extensions/autodoc.rst:24
msgid ""
":mod:`~sphinx.ext.autodoc` **imports** the modules to be documented.  If "
"any modules have side effects on import, these will be executed by "
"``autodoc`` when ``sphinx-build`` is run."
msgstr ""
":mod:`~sphinx.ext.autodoc` **导入** 要记录的模块。如果任何模块对导入有副作用，那么当运行 ``sphinx-"
"build`` 时，这些将由 ``autodoc`` 执行。"

#: ../../usage/extensions/autodoc.rst:28
msgid ""
"If you document scripts (as opposed to library modules), make sure their "
"main routine is protected by a ``if __name__ == '__main__'`` condition."
msgstr "如果您记录脚本（而不是库模块），请确保它们的主例程受 ``if __name__ == '__main__'`` 条件的保护。"

#: ../../usage/extensions/autodoc.rst:31
msgid ""
"For this to work, the docstrings must of course be written in correct "
"reStructuredText.  You can then use all of the usual Sphinx markup in the"
" docstrings, and it will end up correctly in the documentation.  Together"
" with hand-written documentation, this technique eases the pain of having"
" to maintain two locations for documentation, while at the same time "
"avoiding auto-generated-looking pure API documentation."
msgstr "为了实现这一点，文档字符串当然必须用正确的reStructuredText编写。然后，您可以在文档字符串中使用所有常用的Sphinx标记，它最终会在文档中正确显示。与手写文档一起，这种技术减轻了必须维护两个文档位置的痛苦，同时避免了自动生成的纯API文档。"

#: ../../usage/extensions/autodoc.rst:38
msgid ""
"If you prefer `NumPy`_ or `Google`_ style docstrings over "
"reStructuredText, you can also enable the :mod:`napoleon "
"<sphinx.ext.napoleon>` extension. :mod:`napoleon <sphinx.ext.napoleon>` "
"is a preprocessor that converts your docstrings to correct "
"reStructuredText before :mod:`autodoc` processes them."
msgstr ""
"如果您更喜欢 `NumPy`_ 或 `Google`_ 样式文档字符串而不是 reStructuredText，您还可以启用 "
":mod:`napoleon <sphinx.ext.napoleon>` 扩展名。  :mod:`napoleon "
"<sphinx.ext.napoleon>` 是一个预处理器，可以将你的文档字符串转换为正确的reStructuredText "
":mod:`autodoc` 处理它们。"

#: ../../usage/extensions/autodoc.rst:50
msgid "Directives"
msgstr "指令"

#: ../../usage/extensions/autodoc.rst:52
msgid ""
":mod:`autodoc` provides several directives that are versions of the usual"
" :rst:dir:`py:module`, :rst:dir:`py:class` and so forth.  On parsing "
"time, they import the corresponding module and extract the docstring of "
"the given objects, inserting them into the page source under a suitable "
":rst:dir:`py:module`, :rst:dir:`py:class` etc.  directive."
msgstr ""
":mod:`autodoc` 提供了几个通常版本的指令 :rst:dir:`py:module` ， :rst:dir:`py:class` "
"等等。在解析时，他们导入相应的模块并提取给定对象的文档字符串，将它们插入适当的页面源 :rst:dir:`py:module` ， "
":rst:dir:`py:class` 等。指示。"

#: ../../usage/extensions/autodoc.rst:60
msgid ""
"Just as :rst:dir:`py:class` respects the current :rst:dir:`py:module`, "
":rst:dir:`autoclass` will also do so.  Likewise, :rst:dir:`automethod` "
"will respect the current :rst:dir:`py:class`."
msgstr ""
"就像 :rst:dir:`py:class` 尊重当前 :rst:dir:`py:module` ， :rst:dir:`autoclass` "
"也会这样做。同样地， :rst:dir:`automethod` 将尊重当前 :rst:dir:`py:class` 。"

#: ../../usage/extensions/autodoc.rst:69
msgid ""
"Document a module, class or exception.  All three directives will by "
"default only insert the docstring of the object itself::"
msgstr "记录模块，类或异常。  默认情况下，所有三个指令都只插入对象本身的docstring::"

#: ../../usage/extensions/autodoc.rst:74
msgid "will produce source like this::"
msgstr "会产生这样的来源::"

#: ../../usage/extensions/autodoc.rst:80
msgid ""
"The \"auto\" directives can also contain content of their own, it will be"
" inserted into the resulting non-auto directive source after the "
"docstring (but before any automatic member documentation)."
msgstr "\"auto\" 指令也可以包含自己的内容，它将在docstring之后插入到生成的非自动指令源中（但在任何自动成员文档之前）。"

#: ../../usage/extensions/autodoc.rst:84
msgid ""
"Therefore, you can also mix automatic and non-automatic member "
"documentation, like so::"
msgstr "因此，您还可以混合使用自动和非自动成员文档，例如::"

#: ../../usage/extensions/autodoc.rst:94
msgid "**Options and advanced usage**"
msgstr "**选项和高级用法**"

#: ../../usage/extensions/autodoc.rst:96
msgid ""
"If you want to automatically document members, there's a ``members`` "
"option::"
msgstr "如果你想自动记录成员，那就有一个 ``members`` 选项::"

#: ../../usage/extensions/autodoc.rst:102
msgid "will document all module members (recursively), and ::"
msgstr "将记录所有模块成员（递归），::"

#: ../../usage/extensions/autodoc.rst:107
msgid ""
"will document all non-private member functions and properties (that is, "
"those whose name doesn't start with ``_``)."
msgstr "将记录所有非私有成员函数和属性（即名称不以 ``_`` 开头的那些）。"

#: ../../usage/extensions/autodoc.rst:110
msgid ""
"For modules, ``__all__`` will be respected when looking for members "
"unless you give the ``ignore-module-all`` flag option.  Without ``ignore-"
"module-all``, the order of the members will also be the order in "
"``__all__``."
msgstr ""
"对于模块，除非你给出 ``ignore-module-all`` 标志选项，否则在查找成员时将会尊重 ``__all__`` 。没有 "
"``ignore-module-all`` ，成员的顺序也将是 ``__all__`` 中的顺序。"

#: ../../usage/extensions/autodoc.rst:115
msgid ""
"You can also give an explicit list of members; only these will then be "
"documented::"
msgstr "您还可以提供明确的成员列表;只有这些将被记录::"

#: ../../usage/extensions/autodoc.rst:121
msgid ""
"If you want to make the ``members`` option (or other options described "
"below) the default, see :confval:`autodoc_default_options`."
msgstr ""
"如果你想使 ``members`` 选项（或下面描述的其他选项）成为默认选项，请参阅 "
":confval:`autodoc_default_options` 。"

#: ../../usage/extensions/autodoc.rst:126
msgid ""
"You can use a negated form, :samp:`'no-{flag}'`, as an option of autodoc "
"directive, to disable it temporarily.  For example::"
msgstr "你可以使用一个否定的形式 :samp:`'no- {flag}'` 作为autodoc指令的一个选项，暂时禁用它。例如::"

#: ../../usage/extensions/autodoc.rst:133
msgid ""
"Members without docstrings will be left out, unless you give the ``undoc-"
"members`` flag option::"
msgstr "没有docstrings的成员将被省略，除非你给出``undoc-members`` 标志选项::"

#: ../../usage/extensions/autodoc.rst:140
msgid ""
"\"Private\" members (that is, those named like ``_private`` or "
"``__private``) will be included if the ``private-members`` flag option is"
" given."
msgstr ""
"如果给出 ``private-members`` flag选项，将包含 ``Private`` 成员（即名为 ``_private`` 或 "
"``__private`` 的成员）。"

#: ../../usage/extensions/autodoc.rst:145
msgid ""
"Python \"special\" members (that is, those named like ``__special__``) "
"will be included if the ``special-members`` flag option is given::"
msgstr ""

#: ../../usage/extensions/autodoc.rst:153
msgid "would document both \"private\" and \"special\" members of the class."
msgstr "would document both \"private\" and \"special\" members of the class."

#: ../../usage/extensions/autodoc.rst:157
msgid "The option can now take arguments, i.e. the special members to document."
msgstr "The option can now take arguments, i.e. the special members to document."

#: ../../usage/extensions/autodoc.rst:160
msgid ""
"For classes and exceptions, members inherited from base classes will be "
"left out when documenting all members, unless you give the ``inherited-"
"members`` flag option, in addition to ``members``::"
msgstr ""

#: ../../usage/extensions/autodoc.rst:168
msgid ""
"This can be combined with ``undoc-members`` to document *all* available "
"members of the class or module."
msgstr ""

#: ../../usage/extensions/autodoc.rst:171
msgid ""
"Note: this will lead to markup errors if the inherited members come from "
"a module whose docstrings are not reST formatted."
msgstr ""

#: ../../usage/extensions/autodoc.rst:176
msgid ""
"It's possible to override the signature for explicitly documented "
"callable objects (functions, methods, classes) with the regular syntax "
"that will override the signature gained from introspection::"
msgstr ""

#: ../../usage/extensions/autodoc.rst:184
msgid "This is useful if the signature from the method is hidden by a decorator."
msgstr "This is useful if the signature from the method is hidden by a decorator."

#: ../../usage/extensions/autodoc.rst:188
msgid ""
"The :rst:dir:`automodule`, :rst:dir:`autoclass` and "
":rst:dir:`autoexception` directives also support a flag option called "
"``show-inheritance``.  When given, a list of base classes will be "
"inserted just below the class signature (when used with "
":rst:dir:`automodule`, this will be inserted for every class that is "
"documented in the module)."
msgstr ""

#: ../../usage/extensions/autodoc.rst:196
msgid ""
"All autodoc directives support the ``noindex`` flag option that has the "
"same effect as for standard :rst:dir:`py:function` etc. directives: no "
"index entries are generated for the documented object (and all "
"autodocumented members)."
msgstr ""

#: ../../usage/extensions/autodoc.rst:203
msgid ""
":rst:dir:`automodule` also recognizes the ``synopsis``, ``platform`` and "
"``deprecated`` options that the standard :rst:dir:`py:module` directive "
"supports."
msgstr ""

#: ../../usage/extensions/autodoc.rst:209
msgid ""
":rst:dir:`automodule` and :rst:dir:`autoclass` also has an ``member-"
"order`` option that can be used to override the global value of "
":confval:`autodoc_member_order` for one directive."
msgstr ""

#: ../../usage/extensions/autodoc.rst:215
msgid ""
"The directives supporting member documentation also have a ``exclude-"
"members`` option that can be used to exclude single member names from "
"documentation, if all members are to be documented."
msgstr ""

#: ../../usage/extensions/autodoc.rst:221
msgid ""
"In an :rst:dir:`automodule` directive with the ``members`` option set, "
"only module members whose ``__module__`` attribute is equal to the module"
" name as given to ``automodule`` will be documented.  This is to prevent "
"documentation of imported classes or functions.  Set the ``imported-"
"members`` option if you want to prevent this behavior and document all "
"available members.  Note that attributes from imported modules will not "
"be documented, because attribute documentation is discovered by parsing "
"the source file of the current module."
msgstr ""

#: ../../usage/extensions/autodoc.rst:232
msgid ""
"Add a list of modules in the :confval:`autodoc_mock_imports` to prevent "
"import errors to halt the building process when some external "
"dependencies are not importable at build time."
msgstr ""

#: ../../usage/extensions/autodoc.rst:245
msgid ""
"These work exactly like :rst:dir:`autoclass` etc., but do not offer the "
"options used for automatic member documentation."
msgstr ""

#: ../../usage/extensions/autodoc.rst:248
msgid ""
":rst:dir:`autodata` and :rst:dir:`autoattribute` support the "
"``annotation`` option. Without this option, the representation of the "
"object will be shown in the documentation. When the option is given "
"without arguments, only the name of the object will be printed::"
msgstr ""

#: ../../usage/extensions/autodoc.rst:258
msgid "You can tell sphinx what should be printed after the name::"
msgstr "You can tell sphinx what should be printed after the name::"

#: ../../usage/extensions/autodoc.rst:263
msgid ""
"For module data members and class attributes, documentation can either be"
" put into a comment with special formatting (using a ``#:`` to start the "
"comment instead of just ``#``), or in a docstring *after* the definition."
"  Comments need to be either on a line of their own *before* the "
"definition, or immediately after the assignment *on the same line*.  The "
"latter form is restricted to one line only."
msgstr ""

#: ../../usage/extensions/autodoc.rst:270
msgid ""
"This means that in the following class definition, all attributes can be "
"autodocumented::"
msgstr ""

#: ../../usage/extensions/autodoc.rst:292
msgid ""
":rst:dir:`autodata` and :rst:dir:`autoattribute` can now extract "
"docstrings."
msgstr ""

#: ../../usage/extensions/autodoc.rst:295
msgid "Comment docs are now allowed on the same line after an assignment."
msgstr "Comment docs are now allowed on the same line after an assignment."

#: ../../usage/extensions/autodoc.rst:297
msgid ""
":rst:dir:`autodata` and :rst:dir:`autoattribute` have an ``annotation`` "
"option."
msgstr ""

#: ../../usage/extensions/autodoc.rst:300
msgid ":rst:dir:`autodecorator` added."
msgstr ":rst:dir:`autodecorator` added."

#: ../../usage/extensions/autodoc.rst:305
msgid ""
"If you document decorated functions or methods, keep in mind that autodoc"
" retrieves its docstrings by importing the module and inspecting the "
"``__doc__`` attribute of the given function or method.  That means that "
"if a decorator replaces the decorated function with another, it must copy"
" the original ``__doc__`` to the new function."
msgstr ""

#: ../../usage/extensions/autodoc.rst:311
msgid ""
"From Python 2.5, :func:`functools.wraps` can be used to create well-"
"behaved decorating functions."
msgstr ""

#: ../../usage/extensions/autodoc.rst:316
msgid "Configuration"
msgstr "配置"

#: ../../usage/extensions/autodoc.rst:318
msgid "There are also config values that you can set:"
msgstr "您还可以设置配置值:"

#: ../../usage/extensions/autodoc.rst:322
msgid ""
"This value selects what content will be inserted into the main body of an"
" :rst:dir:`autoclass` directive.  The possible values are:"
msgstr ""

#: ../../usage/extensions/autodoc.rst:327
msgid "``\"class\"``"
msgstr "``\"class\"``"

#: ../../usage/extensions/autodoc.rst:326
msgid ""
"Only the class' docstring is inserted.  This is the default.  You can "
"still document ``__init__`` as a separate method using "
":rst:dir:`automethod` or the ``members`` option to :rst:dir:`autoclass`."
msgstr ""

#: ../../usage/extensions/autodoc.rst:330
msgid "``\"both\"``"
msgstr "``\"both\"``"

#: ../../usage/extensions/autodoc.rst:330
msgid ""
"Both the class' and the ``__init__`` method's docstring are concatenated "
"and inserted."
msgstr ""

#: ../../usage/extensions/autodoc.rst:333
msgid "``\"init\"``"
msgstr "``\"init\"``"

#: ../../usage/extensions/autodoc.rst:333
msgid "Only the ``__init__`` method's docstring is inserted."
msgstr "Only the ``__init__`` method's docstring is inserted."

#: ../../usage/extensions/autodoc.rst:337
msgid ""
"If the class has no ``__init__`` method or if the ``__init__`` method's "
"docstring is empty, but the class has a ``__new__`` method's docstring, "
"it is used instead."
msgstr ""

#: ../../usage/extensions/autodoc.rst:345
msgid ""
"This value selects if automatically documented members are sorted "
"alphabetical (value ``'alphabetical'``), by member type (value "
"``'groupwise'``) or by source order (value ``'bysource'``).  The default "
"is alphabetical."
msgstr ""

#: ../../usage/extensions/autodoc.rst:350
msgid ""
"Note that for source order, the module must be a Python module with the "
"source code available."
msgstr ""

#: ../../usage/extensions/autodoc.rst:354
msgid "Support for ``'bysource'``."
msgstr "支持 ``'bysource'``."

#: ../../usage/extensions/autodoc.rst:359
msgid ""
"This value is a list of autodoc directive flags that should be "
"automatically applied to all autodoc directives.  The supported flags are"
" ``'members'``, ``'undoc-members'``, ``'private-members'``, ``'special-"
"members'``, ``'inherited-members'``, ``'show-inheritance'``, ``'ignore-"
"module-all'`` and ``'exclude-members'``."
msgstr ""

#: ../../usage/extensions/autodoc.rst:369
msgid "Integrated into :confval:`autodoc_default_options`."
msgstr "Integrated into :confval:`autodoc_default_options`."

#: ../../usage/extensions/autodoc.rst:373
msgid ""
"The default options for autodoc directives.  They are applied to all "
"autodoc directives automatically.  It must be a dictionary which maps "
"option names to the values.  For example::"
msgstr ""

#: ../../usage/extensions/autodoc.rst:385
msgid ""
"Setting ``None`` or ``True`` to the value is equivalent to giving only "
"the option name to the directives."
msgstr ""

#: ../../usage/extensions/autodoc.rst:388
msgid ""
"The supported options are ``'members'``, ``'member-order'``, ``'undoc-"
"members'``, ``'private-members'``, ``'special-members'``, ``'inherited-"
"members'``, ``'show-inheritance'``, ``'ignore-module-all'`` and "
"``'exclude-members'``."
msgstr ""

#: ../../usage/extensions/autodoc.rst:395
msgid "Accepts ``True`` as a value."
msgstr "Accepts ``True`` as a value."

#: ../../usage/extensions/autodoc.rst:400
msgid ""
"Functions imported from C modules cannot be introspected, and therefore "
"the signature for such functions cannot be automatically determined.  "
"However, it is an often-used convention to put the signature into the "
"first line of the function's docstring."
msgstr ""

#: ../../usage/extensions/autodoc.rst:405
msgid ""
"If this boolean value is set to ``True`` (which is the default), autodoc "
"will look at the first line of the docstring for functions and methods, "
"and if it looks like a signature, use the line as the signature and "
"remove it from the docstring content."
msgstr ""

#: ../../usage/extensions/autodoc.rst:414
msgid ""
"This value contains a list of modules to be mocked up. This is useful "
"when some external dependencies are not met at build time and break the "
"building process. You may only specify the root package of the "
"dependencies themselves and omit the sub-modules:"
msgstr ""

#: ../../usage/extensions/autodoc.rst:423
msgid "Will mock all imports under the ``django`` package."
msgstr "Will mock all imports under the ``django`` package."

#: ../../usage/extensions/autodoc.rst:427
msgid ""
"This config value only requires to declare the top-level modules that "
"should be mocked."
msgstr ""

#: ../../usage/extensions/autodoc.rst:433
msgid ""
"This value controls the behavior of :option:`sphinx-build -W` during "
"importing modules. If ``False`` is given, autodoc forcedly suppresses the"
" error if the imported module emits warnings.  By default, ``True``."
msgstr ""

#: ../../usage/extensions/autodoc.rst:440
msgid ""
"This value controls the docstrings inheritance. If set to True the "
"docstring for classes or methods, if not explicitly set, is inherited "
"form parents."
msgstr ""

#: ../../usage/extensions/autodoc.rst:444
msgid "The default is ``True``."
msgstr "The default is ``True``."

#: ../../usage/extensions/autodoc.rst:451
msgid ""
":mod:`autodoc` supports to suppress warning messages via "
":confval:`suppress_warnings`.  It allows following warnings types in "
"addition:"
msgstr ""

#: ../../usage/extensions/autodoc.rst:455
msgid "autodoc"
msgstr "autodoc"

#: ../../usage/extensions/autodoc.rst:456
msgid "autodoc.import_object"
msgstr "autodoc.import_object"

#: ../../usage/extensions/autodoc.rst:460
msgid "Docstring preprocessing"
msgstr "Docstring预处理"

#: ../../usage/extensions/autodoc.rst:462
msgid "autodoc provides the following additional events:"
msgstr "autodoc提供以下附加事件:"

#: ../../usage/extensions/autodoc.rst:468
msgid ""
"Emitted when autodoc has read and processed a docstring.  *lines* is a "
"list of strings -- the lines of the processed docstring -- that the event"
" handler can modify **in place** to change what Sphinx puts into the "
"output."
msgstr ""

#: ../../usage/extensions/autodoc.rst
msgid "参数"
msgstr ""

#: ../../usage/extensions/autodoc.rst:472
#: ../../usage/extensions/autodoc.rst:492
#: ../../usage/extensions/autodoc.rst:534
msgid "the Sphinx application object"
msgstr "Sphinx应用程序对象"

#: ../../usage/extensions/autodoc.rst:473
#: ../../usage/extensions/autodoc.rst:493
#: ../../usage/extensions/autodoc.rst:535
msgid ""
"the type of the object which the docstring belongs to (one of "
"``\"module\"``, ``\"class\"``, ``\"exception\"``, ``\"function\"``, "
"``\"method\"``, ``\"attribute\"``)"
msgstr ""
"docstring属于它的对象的类型 (之一 ``\"module\"``, ``\"class\"``, ``\"exception\"``, "
"``\"function\"``, ``\"method\"``, ``\"attribute\"``)"

#: ../../usage/extensions/autodoc.rst:476
#: ../../usage/extensions/autodoc.rst:496
#: ../../usage/extensions/autodoc.rst:538
msgid "the fully qualified name of the object"
msgstr "对象的完全限定名称"

#: ../../usage/extensions/autodoc.rst:477
#: ../../usage/extensions/autodoc.rst:497
#: ../../usage/extensions/autodoc.rst:539
msgid "the object itself"
msgstr "对象本身"

#: ../../usage/extensions/autodoc.rst:478
#: ../../usage/extensions/autodoc.rst:498
#: ../../usage/extensions/autodoc.rst:542
msgid ""
"the options given to the directive: an object with attributes "
"``inherited_members``, ``undoc_members``, ``show_inheritance`` and "
"``noindex`` that are true if the flag option of same name was given to "
"the auto directive"
msgstr ""
"指令的选项:具有属性 ``inherited_members`` ， ``undoc_members`` ， "
"``show_inheritance`` 和 ``noindex`` 的对象，如果为auto指令赋予了相同名称的flag选项，则为 true "

#: ../../usage/extensions/autodoc.rst:482
msgid "the lines of the docstring, see above"
msgstr "文档字符串的行，见上文"

#: ../../usage/extensions/autodoc.rst:488
msgid ""
"Emitted when autodoc has formatted a signature for an object. The event "
"handler can return a new tuple ``(signature, return_annotation)`` to "
"change what Sphinx puts into the output."
msgstr ""
"autodoc格式化对象的签名时发出。事件处理程序可以返回一个新的元组 ``(signature, return_annotation)`` "
"来改变Sphinx放入输出的内容。"

#: ../../usage/extensions/autodoc.rst:502
msgid ""
"function signature, as a string of the form ``\"(parameter_1, "
"parameter_2)\"``, or ``None`` if introspection didn't succeed and "
"signature wasn't specified in the directive."
msgstr ""

#: ../../usage/extensions/autodoc.rst:505
msgid ""
"function return annotation as a string of the form ``\" -> "
"annotation\"``, or ``None`` if there is no return annotation"
msgstr ""

#: ../../usage/extensions/autodoc.rst:508
msgid ""
"The :mod:`sphinx.ext.autodoc` module provides factory functions for "
"commonly needed docstring processing in event :event:`autodoc-process-"
"docstring`:"
msgstr ""

#: of sphinx.ext.autodoc.cut_lines:1
msgid ""
"Return a listener that removes the first *pre* and last *post* lines of "
"every docstring.  If *what* is a sequence of strings, only docstrings of "
"a type in *what* will be processed."
msgstr ""

#: of sphinx.ext.autodoc.cut_lines:5
msgid "Use like this (e.g. in the ``setup()`` function of :file:`conf.py`)::"
msgstr "Use like this (e.g. in the ``setup()`` function of :file:`conf.py`)::"

#: of sphinx.ext.autodoc.cut_lines:10
msgid ""
"This can (and should) be used in place of "
":confval:`automodule_skip_lines`."
msgstr ""

#: of sphinx.ext.autodoc.between:1
msgid ""
"Return a listener that either keeps, or if *exclude* is True excludes, "
"lines between lines that match the *marker* regular expression.  If no "
"line matches, the resulting docstring would be empty, so no change will "
"be made unless *keepempty* is true."
msgstr ""

#: of sphinx.ext.autodoc.between:6
msgid ""
"If *what* is a sequence of strings, only docstrings of a type in *what* "
"will be processed."
msgstr ""

#: ../../usage/extensions/autodoc.rst:516
msgid "Skipping members"
msgstr "跳过会员"

#: ../../usage/extensions/autodoc.rst:518
msgid ""
"autodoc allows the user to define a custom method for determining whether"
" a member should be included in the documentation by using the following "
"event:"
msgstr "autodoc允许用户使用以下事件定义一个自定义方法，以确定是否应将成员包含在文档中:"

#: ../../usage/extensions/autodoc.rst:525
msgid ""
"Emitted when autodoc has to decide whether a member should be included in"
" the documentation.  The member is excluded if a handler returns "
"``True``.  It is included if the handler returns ``False``."
msgstr ""
"autodoc必须决定是否应将成员包含在文档中时发出。如果处理程序返回 ``True``，则排除该成员。如果处理程序返回 ``False`` "
"，则包含它。"

#: ../../usage/extensions/autodoc.rst:529
msgid ""
"If more than one enabled extension handles the ``autodoc-skip-member`` "
"event, autodoc will use the first non-``None`` value returned by a "
"handler. Handlers should return ``None`` to fall back to the skipping "
"behavior of autodoc and other enabled extensions."
msgstr ""
"如果多个启用的扩展处理 ``autodoc-skip-member`` 事件，autodoc将使用处理程序返回的第一个 non-``None`` "
"值。处理程序应返回 ``None``  以回退到autodoc和其他已启用扩展的跳过行为。"

#: ../../usage/extensions/autodoc.rst:540
msgid ""
"a boolean indicating if autodoc will skip this member if the user handler"
" does not override the decision"
msgstr "一个布尔值，指示如果用户处理程序未覆盖该决定，autodoc是否将跳过此成员"

#~ msgid "Parameters"
#~ msgstr ""

#~ msgid "参数"
#~ msgstr "参数"

