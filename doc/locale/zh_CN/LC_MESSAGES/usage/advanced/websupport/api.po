# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2019, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 2.1.0+/1499a97c2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-30 00:15+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../usage/advanced/websupport/api.rst:6
msgid "The WebSupport Class"
msgstr "Web Support类"

#: ../../usage/advanced/websupport/api.rst:10
msgid ""
"The main API class for the web support package.  All interactions with "
"the web support package should occur through this class."
msgstr "Web支持包的主要API类。与Web支持包的所有交互都应该通过此类进行。"

#: ../../usage/advanced/websupport/api.rst:13
msgid "The class takes the following keyword arguments:"
msgstr "该类采用以下关键字参数:"

#: ../../usage/advanced/websupport/api.rst:16
msgid "srcdir"
msgstr "srcdir"

#: ../../usage/advanced/websupport/api.rst:16
msgid "The directory containing reStructuredText source files."
msgstr "The directory containing reStructuredText source files."

#: ../../usage/advanced/websupport/api.rst:21
msgid "builddir"
msgstr "builddir"

#: ../../usage/advanced/websupport/api.rst:19
msgid ""
"The directory that build data and static files should be placed in.  This"
" should be used when creating a :class:`WebSupport` object that will be "
"used to build data."
msgstr ""

#: ../../usage/advanced/websupport/api.rst:25
msgid "datadir"
msgstr "datadir"

#: ../../usage/advanced/websupport/api.rst:24
msgid ""
"The directory that the web support data is in.  This should be used when "
"creating a :class:`WebSupport` object that will be used to retrieve data."
msgstr ""

#: ../../usage/advanced/websupport/api.rst:30
msgid "search"
msgstr "search"

#: ../../usage/advanced/websupport/api.rst:28
msgid ""
"This may contain either a string (e.g. 'xapian') referencing a built-in "
"search adapter to use, or an instance of a subclass of "
":class:`~.search.BaseSearch`."
msgstr ""

#: ../../usage/advanced/websupport/api.rst:35
msgid "storage"
msgstr "storage"

#: ../../usage/advanced/websupport/api.rst:33
msgid ""
"This may contain either a string representing a database uri, or an "
"instance of a subclass of :class:`~.storage.StorageBackend`.  If this is "
"not provided, a new sqlite database will be created."
msgstr ""

#: ../../usage/advanced/websupport/api.rst:40
msgid "moderation_callback"
msgstr "moderation_callback"

#: ../../usage/advanced/websupport/api.rst:38
msgid ""
"A callable to be called when a new comment is added that is not "
"displayed.  It must accept one argument: a dictionary representing the "
"comment that was added."
msgstr ""

#: ../../usage/advanced/websupport/api.rst:49
msgid "staticdir"
msgstr "staticdir"

#: ../../usage/advanced/websupport/api.rst:43
msgid ""
"If the static files should be created in a different location **and not "
"in** ``'/static'``, this should be a string with the name of that "
"location (e.g. ``builddir + '/static_files'``)."
msgstr ""

#: ../../usage/advanced/websupport/api.rst:48
msgid ""
"If you specify ``staticdir``, you will typically want to adjust "
"``staticroot`` accordingly."
msgstr ""

#: ../../usage/advanced/websupport/api.rst:53
msgid "staticroot"
msgstr "staticroot"

#: ../../usage/advanced/websupport/api.rst:52
msgid ""
"If the static files are not served from ``'/static'``, this should be a "
"string with the name of that location (e.g. ``'/static_files'``)."
msgstr ""

#: ../../usage/advanced/websupport/api.rst:56
msgid "docroot"
msgstr "docroot"

#: ../../usage/advanced/websupport/api.rst:56
msgid ""
"If the documentation is not served from the base path of a URL, this "
"should be a string specifying that path (e.g. ``'docs'``)."
msgstr ""

#: ../../usage/advanced/websupport/api.rst:62
msgid ""
"WebSupport class is moved to sphinxcontrib.websupport from "
"sphinx.websupport. Please add ``sphinxcontrib-websupport`` package in "
"your dependency and use moved class instead."
msgstr ""

#: ../../usage/advanced/websupport/api.rst:68
msgid "Methods"
msgstr "Methods"

#: of sphinxcontrib.websupport.WebSupport.build:1
msgid ""
"Build the documentation. Places the data into the `outdir` directory. Use"
" it like this::"
msgstr ""

#: of sphinxcontrib.websupport.WebSupport.build:7
msgid ""
"This will read reStructured text files from `srcdir`. Then it will build "
"the pickles and search index, placing them into `builddir`. It will also "
"save node data to the database."
msgstr ""

#: of sphinxcontrib.websupport.WebSupport.get_document:1
msgid ""
"Load and return a document from a pickle. The document will be a dict "
"object which can be used to render a template::"
msgstr ""

#: of sphinxcontrib.websupport.WebSupport.get_document:7
msgid ""
"In most cases `docname` will be taken from the request path and passed "
"directly to this function. In Flask, that would be something like this::"
msgstr ""

#: of sphinxcontrib.websupport.WebSupport.get_document:22
msgid ""
"The document dict that is returned contains the following items to be "
"used during template rendering."
msgstr ""

#: of sphinxcontrib.websupport.WebSupport.get_document:25
msgid "**body**: The main body of the document as HTML"
msgstr "**body**: The main body of the document as HTML"

#: of sphinxcontrib.websupport.WebSupport.get_document:26
msgid "**sidebar**: The sidebar of the document as HTML"
msgstr "**sidebar**: The sidebar of the document as HTML"

#: of sphinxcontrib.websupport.WebSupport.get_document:27
msgid "**relbar**: A div containing links to related documents"
msgstr "**relbar**: A div containing links to related documents"

#: of sphinxcontrib.websupport.WebSupport.get_document:28
msgid "**title**: The title of the document"
msgstr "**title**: The title of the document"

#: of sphinxcontrib.websupport.WebSupport.get_document:29
msgid "**css**: Links to css files used by Sphinx"
msgstr "**css**: Links to css files used by Sphinx"

#: of sphinxcontrib.websupport.WebSupport.get_document:30
msgid "**script**: Javascript containing comment options"
msgstr "**script**: Javascript containing comment options"

#: of sphinxcontrib.websupport.WebSupport.get_document:32
msgid ""
"This raises "
":class:`~sphinxcontrib.websupport.errors.DocumentNotFoundError` if a "
"document matching `docname` is not found."
msgstr ""

#: of sphinxcontrib.websupport.WebSupport.add_comment
#: sphinxcontrib.websupport.WebSupport.get_data
#: sphinxcontrib.websupport.WebSupport.get_document
#: sphinxcontrib.websupport.WebSupport.get_search_results
#: sphinxcontrib.websupport.WebSupport.process_vote
msgid "参数"
msgstr "参数"

#: of sphinxcontrib.websupport.WebSupport.get_document:35
msgid "the name of the document to load."
msgstr "the name of the document to load."

#: of sphinxcontrib.websupport.WebSupport.get_data:1
msgid ""
"Get the comments and source associated with `node_id`. If `username` is "
"given vote information will be included with the returned comments. The "
"default CommentBackend returns a dict with two keys, *source*, and "
"*comments*. *source* is raw source of the node and is used as the "
"starting point for proposals a user can add. *comments* is a list of "
"dicts that represent a comment, each having the following items:"
msgstr ""

#: of sphinxcontrib.websupport.WebSupport.get_data:10
msgid "Key"
msgstr "Key"

#: of sphinxcontrib.websupport.WebSupport.get_data:10
msgid "Contents"
msgstr "Contents"

#: of sphinxcontrib.websupport.WebSupport.get_data:12
msgid "text"
msgstr "text"

#: of sphinxcontrib.websupport.WebSupport.get_data:12
msgid "The comment text."
msgstr "The comment text."

#: of sphinxcontrib.websupport.WebSupport.get_data:13
msgid "username"
msgstr "username"

#: of sphinxcontrib.websupport.WebSupport.get_data:13
msgid "The username that was stored with the comment."
msgstr "The username that was stored with the comment."

#: of sphinxcontrib.websupport.WebSupport.get_data:14
msgid "id"
msgstr "id"

#: of sphinxcontrib.websupport.WebSupport.get_data:14
msgid "The comment's unique identifier."
msgstr "The comment's unique identifier."

#: of sphinxcontrib.websupport.WebSupport.get_data:15
msgid "rating"
msgstr "rating"

#: of sphinxcontrib.websupport.WebSupport.get_data:15
msgid "The comment's current rating."
msgstr "The comment's current rating."

#: of sphinxcontrib.websupport.WebSupport.get_data:16
msgid "age"
msgstr "age"

#: of sphinxcontrib.websupport.WebSupport.get_data:16
msgid "The time in seconds since the comment was added."
msgstr "The time in seconds since the comment was added."

#: of sphinxcontrib.websupport.WebSupport.get_data:17
msgid "time"
msgstr "time"

#: of sphinxcontrib.websupport.WebSupport.get_data:17
msgid ""
"A dict containing time information. It contains the following keys: year,"
" month, day, hour, minute, second, iso, and delta. `iso` is the time "
"formatted in ISO 8601 format. `delta` is a printable form of how old the "
"comment is (e.g. \"3 hours ago\")."
msgstr ""

#: of sphinxcontrib.websupport.WebSupport.get_data:22
msgid "vote"
msgstr "vote"

#: of sphinxcontrib.websupport.WebSupport.get_data:22
msgid ""
"If `user_id` was given, this will be an integer representing the vote. 1 "
"for an upvote, -1 for a downvote, or 0 if unvoted."
msgstr ""

#: of sphinxcontrib.websupport.WebSupport.get_data:25
msgid "node"
msgstr "node"

#: of sphinxcontrib.websupport.WebSupport.get_data:25
msgid ""
"The id of the node that the comment is attached to. If the comment's "
"parent is another comment rather than a node, this will be null."
msgstr ""

#: of sphinxcontrib.websupport.WebSupport.get_data:28
msgid "parent"
msgstr "parent"

#: of sphinxcontrib.websupport.WebSupport.get_data:28
msgid ""
"The id of the comment that this comment is attached to if it is not "
"attached to a node."
msgstr ""

#: of sphinxcontrib.websupport.WebSupport.get_data:30
msgid "children"
msgstr "children"

#: of sphinxcontrib.websupport.WebSupport.get_data:30
msgid "A list of all children, in this format."
msgstr "A list of all children, in this format."

#: of sphinxcontrib.websupport.WebSupport.get_data:31
msgid "proposal_diff"
msgstr "proposal_diff"

#: of sphinxcontrib.websupport.WebSupport.get_data:31
msgid ""
"An HTML representation of the differences between the the current source "
"and the user's proposed source."
msgstr ""

#: of sphinxcontrib.websupport.WebSupport.get_data:35
msgid "the id of the node to get comments for."
msgstr "the id of the node to get comments for."

#: of sphinxcontrib.websupport.WebSupport.get_data:36
msgid "the username of the user viewing the comments."
msgstr "the username of the user viewing the comments."

#: of sphinxcontrib.websupport.WebSupport.get_data:37
msgid "whether the user is a moderator."
msgstr "whether the user is a moderator."

#: of sphinxcontrib.websupport.WebSupport.add_comment:1
msgid ""
"Add a comment to a node or another comment. Returns the comment in the "
"same format as :meth:`get_comments`. If the comment is being attached to "
"a node, pass in the node's id (as a string) with the node keyword "
"argument::"
msgstr ""

#: of sphinxcontrib.websupport.WebSupport.add_comment:8
msgid ""
"If the comment is the child of another comment, provide the parent's id "
"(as a string) with the parent keyword argument::"
msgstr ""

#: of sphinxcontrib.websupport.WebSupport.add_comment:13
msgid ""
"If you would like to store a username with the comment, pass in the "
"optional `username` keyword argument::"
msgstr ""

#: of sphinxcontrib.websupport.WebSupport.add_comment:19
msgid "the prefixed id of the comment's parent."
msgstr "the prefixed id of the comment's parent."

#: of sphinxcontrib.websupport.WebSupport.add_comment:20
msgid "the text of the comment."
msgstr "the text of the comment."

#: of sphinxcontrib.websupport.WebSupport.add_comment:21
msgid "for moderation purposes"
msgstr "for moderation purposes"

#: of sphinxcontrib.websupport.WebSupport.add_comment:22
msgid "the username of the user making the comment."
msgstr "the username of the user making the comment."

#: of sphinxcontrib.websupport.WebSupport.add_comment:23
msgid "the time the comment was created, defaults to now."
msgstr "the time the comment was created, defaults to now."

#: of sphinxcontrib.websupport.WebSupport.process_vote:1
msgid ""
"Process a user's vote. The web support package relies on the API user to "
"perform authentication. The API user will typically receive a comment_id "
"and value from a form, and then make sure the user is authenticated. A "
"unique username  must be passed in, which will also be used to retrieve "
"the user's past voting data. An example, once again in Flask::"
msgstr ""

#: of sphinxcontrib.websupport.WebSupport.process_vote:19
msgid "the comment being voted on"
msgstr "the comment being voted on"

#: of sphinxcontrib.websupport.WebSupport.process_vote:20
msgid "the unique username of the user voting"
msgstr "the unique username of the user voting"

#: of sphinxcontrib.websupport.WebSupport.process_vote:21
msgid "1 for an upvote, -1 for a downvote, 0 for an unvote."
msgstr "1 for an upvote, -1 for a downvote, 0 for an unvote."

#: of sphinxcontrib.websupport.WebSupport.get_search_results:1
msgid ""
"Perform a search for the query `q`, and create a set of search results. "
"Then render the search results as html and return a context dict like the"
" one created by :meth:`get_document`::"
msgstr ""

#: of sphinxcontrib.websupport.WebSupport.get_search_results:8
msgid "the search query"
msgstr "the search query"

#~ msgid "Parameters"
#~ msgstr ""

