# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2007-2019, Georg Brandl and the Sphinx team
# This file is distributed under the same license as the Sphinx package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Sphinx 2.1.0+/1499a97c2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-29 17:17+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../extdev/parserapi.rst:4
msgid "Parser API"
msgstr ""

#: ../../extdev/parserapi.rst:6
msgid "`The docutils documentation describes`__ parsers as follows:"
msgstr ""

#: ../../extdev/parserapi.rst:8
msgid ""
"The Parser analyzes the input document and creates a node tree "
"representation."
msgstr ""

#: ../../extdev/parserapi.rst:13
msgid ""
"In Sphinx, the parser modules works as same as docutils.  The parsers are"
" registered to Sphinx by extensions using Application APIs; "
":meth:`.Sphinx.add_source_suffix()` and "
":meth:`.Sphinx.add_source_parser()`."
msgstr ""

#: ../../extdev/parserapi.rst:17
msgid ""
"The *source suffix* is a mapping from file suffix to file type.  For "
"example, ``.rst`` file is mapped to ``'restructuredtext'`` type.  Sphinx "
"uses the file type to looking for parsers from registered list.  On "
"searching, Sphinx refers to the ``Parser.supported`` attribute and picks "
"up a parser which contains the file type in the attribute."
msgstr ""

#: ../../extdev/parserapi.rst:23
msgid ""
"The users can override the source suffix mappings using "
":confval:`source_suffix` like following::"
msgstr ""

#: ../../extdev/parserapi.rst:32
msgid ""
"You should indicate file types your parser supports. This will allow "
"users to configure their settings appropriately."
msgstr ""

#: of sphinx.parsers.Parser:1
msgid ""
"A base class of source parsers.  The additional parsers should inherit "
"this class instead of ``docutils.parsers.Parser``.  Compared with "
"``docutils.parsers.Parser``, this class improves accessibility to Sphinx "
"APIs."
msgstr ""

#: of sphinx.parsers.Parser:5
msgid "The subclasses can access following objects and functions:"
msgstr ""

#: of sphinx.parsers.Parser:7
msgid "self.app"
msgstr ""

#: of sphinx.parsers.Parser:8
msgid "The application object (:class:`sphinx.application.Sphinx`)"
msgstr ""

#: of sphinx.parsers.Parser:9
msgid "self.config"
msgstr ""

#: of sphinx.parsers.Parser:10
msgid "The config object (:class:`sphinx.config.Config`)"
msgstr ""

#: of sphinx.parsers.Parser:11
msgid "self.env"
msgstr ""

#: of sphinx.parsers.Parser:12
msgid "The environment object (:class:`sphinx.environment.BuildEnvironment`)"
msgstr ""

#: of sphinx.parsers.Parser:13
msgid "self.warn()"
msgstr ""

#: of sphinx.parsers.Parser:14
msgid "Emit a warning. (Same as :meth:`sphinx.application.Sphinx.warn()`)"
msgstr ""

#: of sphinx.parsers.Parser:16
msgid "self.info()"
msgstr ""

#: of sphinx.parsers.Parser:16
msgid ""
"Emit a informational message. (Same as "
":meth:`sphinx.application.Sphinx.info()`)"
msgstr ""

#: of sphinx.parsers.Parser:18
msgid ""
"``warn()`` and ``info()`` is deprecated.  Use :mod:`sphinx.util.logging` "
"instead."
msgstr ""

